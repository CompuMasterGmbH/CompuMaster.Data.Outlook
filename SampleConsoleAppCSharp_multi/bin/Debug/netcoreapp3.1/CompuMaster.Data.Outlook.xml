<?xml version="1.0"?>
<doc>
<assembly>
<name>
CompuMaster.Data.Outlook
</name>
</assembly>
<members>
<member name="T:My.Resources.Resources">
<summary>
  Eine stark typisierte Ressourcenklasse zum Suchen von lokalisierten Zeichenfolgen usw.
</summary>
</member>
<member name="P:My.Resources.Resources.ResourceManager">
<summary>
  Gibt die zwischengespeicherte ResourceManager-Instanz zurück, die von dieser Klasse verwendet wird.
</summary>
</member>
<member name="P:My.Resources.Resources.Culture">
<summary>
  Überschreibt die CurrentUICulture-Eigenschaft des aktuellen Threads für alle
  Ressourcenzuordnungen, die diese stark typisierte Ressourcenklasse verwenden.
</summary>
</member>
<member name="M:CompuMaster.Data.Outlook.ItemTools.ItemProperties(NetOffice.COMObject)">
 <summary>
 Extended properties
 </summary>
 <param name="item"></param>
 <returns></returns>
</member>
<member name="M:CompuMaster.Data.Outlook.ItemTools.ItemPropertyNames(NetOffice.COMObject)">
 <summary>
 A list of available property names of the extended property list ItemProperties
 </summary>
 <param name="item"></param>
 <returns></returns>
</member>
<member name="M:CompuMaster.Data.Outlook.ItemTools.ItemPropertyValues(NetOffice.COMObject,System.String,System.Boolean)">
 <summary>
 Extract extended property values from ItemProperties list
 </summary>
 <param name="item"></param>
 <param name="propertyName">The name of the required property</param>
 <param name="throwExceptionIfPropertyMissing">If the property doesn't exist, throw an exception or return null (Nothing in VisualBasic)</param>
 <returns>The requested property value</returns>
</member>
<member name="T:CompuMaster.Data.Outlook.OutlookApp">
 <summary>
 This solution works only for Outlook
 </summary>
 <remarks></remarks>
</member>
<member name="T:CompuMaster.Data.Outlook.OutlookApp.WellKnownFolderName">
 <summary>
 The list of well known folder names in Exchange
 </summary>
 <remarks></remarks>
</member>
<member name="T:CompuMaster.Data.Outlook.OutlookApp.FolderClass">
 <summary>
 Well known folder classes
 </summary>
 <remarks></remarks>
</member>
<member name="M:CompuMaster.Data.Outlook.OutlookApp.FolderClassName(CompuMaster.Data.Outlook.OutlookApp.FolderClass)">
 <summary>
 Convert the well known folder class into the official folder class name as Exchange
 </summary>
 <param name="folderClass"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:CompuMaster.Data.Outlook.OutlookApp.LookupFolder(NetOffice.OutlookApi.Store,CompuMaster.Data.Outlook.OutlookApp.WellKnownFolderName)">
 <summary>
 Lookup a folder path representation based on its directory structure
 </summary>
 <param name="baseFolder"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:CompuMaster.Data.Outlook.OutlookApp.DirectorySeparatorChar">
 <summary>
 The directory separator char which shall be used in all method calls to this class with parameters specifying a directory structure
 </summary>
 <value></value>
 <returns></returns>
 <remarks>The exchange server supports typical directory separator chars like \, / as a normal character within a directory name. That's why the programmer may want to define his own separator char to support required directories correctly.</remarks>
</member>
<member name="T:CompuMaster.Data.Outlook.Directory">
 <summary>
 Represents a folder in Exchange
 </summary>
 <remarks></remarks>
</member>
<member name="P:CompuMaster.Data.Outlook.Directory.OutlookFolder">
 <summary>
 Gives full access to the Exchange Managed API for this folder
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:CompuMaster.Data.Outlook.Directory.ItemsAsDataTable(CompuMaster.Data.Outlook.Item[],System.Boolean)">
 <summary>
 List available items of a folder
 </summary>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="T:CompuMaster.Data.Outlook.Directory.FolderItemPropertyToColumn">
 <summary>
 Schema information to a column
 </summary>
 <remarks></remarks>
</member>
<member name="M:CompuMaster.Data.Outlook.Directory.ItemCount">
 Total amount of items of a folder
</member>
<member name="M:CompuMaster.Data.Outlook.Directory.ItemUnreadCount">
 <summary>
 Number of unread items of a folder
 </summary>
 <returns></returns>
</member>
<member name="P:CompuMaster.Data.Outlook.Directory.ParentFolderID">
 <summary>
 The unique ID of the parent folder
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:CompuMaster.Data.Outlook.Directory.FolderID">
 <summary>
 The unique ID of the folder
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:CompuMaster.Data.Outlook.Directory.FolderClass">
 <summary>
 The folder class name
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:CompuMaster.Data.Outlook.Directory.DisplayName">
 <summary>
 The display name of the folder
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:CompuMaster.Data.Outlook.Directory.DisplayPath">
 <summary>
 The display path of the folder separated by back-slashes (\)
 </summary>
 <returns>Existing back-slashes in folder's display names might confuse here - in case that back-slahes are possible in display names</returns>
</member>
<member name="P:CompuMaster.Data.Outlook.Directory.Path">
 <summary>
 The path of the folder separated by back-slashes (\)
 </summary>
 <returns>Existing back-slashes in folder's display names might confuse here - in case that back-slahes are possible in display names</returns>
</member>
<member name="P:CompuMaster.Data.Outlook.Directory.ParentDirectory">
 <summary>
 The relative folder path starting from your initial top directory
 </summary>
 <returns></returns>
 <remarks>Parent folder structure can't be looked up till root folder, that's why it's only up to your initial top directory</remarks>
</member>
<member name="M:CompuMaster.Data.Outlook.Directory.SelectSubFolder(System.String,System.Boolean)">
 <summary>
 Lookup a directory based on its directory structure
 </summary>
 <param name="subfolder">A string containing the relative folder path, e.g. &quot;Inbox\Done&quot;</param>
 <param name="searchCaseInsensitive">Ignore upper/lower case differences</param>
 <returns></returns>
</member>
<member name="M:CompuMaster.Data.Outlook.Directory.SelectSubFolder(System.String,System.Boolean,System.Boolean)">
 <summary>
 Lookup a directory based on its directory structure
 </summary>
 <param name="subfolder">A string containing the relative folder path, e.g. &quot;Inbox\Done&quot;</param>
 <param name="searchCaseInsensitive">Ignore upper/lower case differences</param>
 <param name="autoCreateFolder">Create folder if not yet existing</param>
 <returns></returns>
</member>
<member name="M:CompuMaster.Data.Outlook.Directory.SelectSubFolder(System.String,System.Boolean,System.Boolean,System.Char)">
 <summary>
 Lookup a directory based on its directory structure
 </summary>
 <param name="subfolder">A string containing the relative folder path, e.g. &quot;Inbox\Done&quot;</param>
 <param name="searchCaseInsensitive">Ignore upper/lower case differences</param>
 <param name="autoCreateFolder">Create folder if not yet existing</param>
 <param name="directorySeparatorChar"></param>
 <returns></returns>
</member>
<member name="P:CompuMaster.Data.Outlook.Directory.SubFolderCount">
 <summary>
 The number of child folders
 </summary>
 <value></value>
 <returns></returns>
 <remarks>For performance reasons, SubFolderCount doesn't load the full subfolder data in case it hasn't been loaded yet</remarks>
</member>
<member name="T:CompuMaster.Data.Outlook.FolderPathRepresentation">
 <summary>
 A representation of a folder path/ID
 </summary>
 <remarks></remarks>
</member>
<member name="M:CompuMaster.Data.Outlook.FolderPathRepresentation.FolderID">
 <summary>
 The folder ID as used in Exchange
 </summary>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:CompuMaster.Data.Outlook.Item.ItemPropertyNames">
 <summary>
 A list of available property names of the extended property list ItemProperties
 </summary>
 <returns></returns>
</member>
<member name="P:CompuMaster.Data.Outlook.Item.ItemPropertyValues(System.String)">
 <summary>
 Extract extended property values from ItemProperties list
 </summary>
 <param name="propertyName">The name of the required property</param>
 <returns>The requested property value or null (Nothing in Visual Basic) if the property doesn't exist</returns>
</member>
<member name="P:CompuMaster.Data.Outlook.Item.ItemPropertyValues(System.String,System.Boolean)">
 <summary>
 Extract extended property values from ItemProperties list
 </summary>
 <param name="propertyName">The name of the required property</param>
 <param name="throwExceptionIfPropertyMissing">If the property doesn't exist, throw an exception or return null (Nothing in VisualBasic)</param>
 <returns>The requested property value</returns>
</member>
<member name="T:CompuMaster.Data.Outlook.Recipient">
 <summary>
 Represents an attendee or recipient
 </summary>
 <remarks></remarks>
</member>
</members>
</doc>
